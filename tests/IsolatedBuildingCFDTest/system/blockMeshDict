/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

backgroundMesh
{
	xMin		-2.2860;
	yMin		-2.2860;
	zMin		0.0000;
	xMax		6.8580;
	yMax		2.2860;
	zMax		2.2860;
	xCells		80;
	yCells		40;
	zCells		20;
	xGrading	1.0000;
	yGrading	1.0000;
	zGrading	11.0000;
}

convertToMeters 1.0000;

vertices
(
    ($!backgroundMesh/xMin $!backgroundMesh/yMin $!backgroundMesh/zMin)
    ($!backgroundMesh/xMax $!backgroundMesh/yMin $!backgroundMesh/zMin)
    ($!backgroundMesh/xMax $!backgroundMesh/yMax $!backgroundMesh/zMin)
    ($!backgroundMesh/xMin $!backgroundMesh/yMax $!backgroundMesh/zMin)

    ($!backgroundMesh/xMin $!backgroundMesh/yMin $!backgroundMesh/zMax)
    ($!backgroundMesh/xMax $!backgroundMesh/yMin $!backgroundMesh/zMax)
    ($!backgroundMesh/xMax $!backgroundMesh/yMax $!backgroundMesh/zMax)
    ($!backgroundMesh/xMin $!backgroundMesh/yMax $!backgroundMesh/zMax)
);

blocks
(
    hex (0 1 2 3 4 5 6 7)
    (
        $!backgroundMesh/xCells
        $!backgroundMesh/yCells
        $!backgroundMesh/zCells
    )
    simpleGrading ($!backgroundMesh/xGrading $!backgroundMesh/yGrading $!backgroundMesh/zGrading)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 3 7 4)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (1 5 6 2)
        );
    }

    ground
    {
        type wall;
        faces
        (
            (0 1 2 3)
        );
    }
    
    top
    {
        type symmetry;
        faces
        (
            (4 7 6 5)
        );
    }

    front
    {
        type symmetry;
        faces
        (
            (0 4 5 1)
        );
    }
    
    back
    {
        type symmetry;
        faces
        (
            (3 2 6 7)
        );
    }
);

// ************************************************************************* //
